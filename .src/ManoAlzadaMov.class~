' Gambas class file

Inherits Dibujo

Private ArrayCoord As New Point[]
Private tiempos As New Float[] 'guandro en formato float
Private Ruptura As New Boolean[] 'para puntos de ruptura entre polilineas

Private paso As Integer = 2
Private Dashes As Float[] = [5.0, 1.0, 1.0, 1.0]  'skip

Private dx As Integer
Private dy As Integer
Private hrelleno As Boolean = False 'relleno de la superficie creada
Private hsemitransparente As Boolean = False 'semi transparencia en el color de la linea (version 0.0.55)

Private horaInicio As Date

Property activarMovimiento As Boolean
Private hactivarMovimiento As Boolean

Private DibujandoActivo As Boolean 'si es true dibuja paso a paso, y si no, no dibuja [el color final]
Private InicioDibujando As Date 'hora de inicio de para que se empieze a redibujar

Private tiempoinicial As Date ' en la hora de inicio cuando se creo el primer punto

Public Sub _new(...)
  
  Dim puntoTmp As New Point
  
  puntoTmp.x = param[0]
  puntoTmp.y = param[1]
  horaInicio = Param[2] 'hora donde empiezo el dibujo
  tiempos.Add(0) 'es el primer punto tiempo 0
  TiempoInicial = Now
  Ruptura.Add(True)
  
  ArrayCoord.Add(puntoTmp)
  
End

Public Sub dibujaLineaPunteada()
  
  Paint.LineCap = Paint.LineCapButt
  Paint.LineWidth = 3
  Paint.Dash = Dashes
  Paint.DashOffset = -5
  Paint.Brush = Paint.Color(Color.RGB(0, 0, 0))
  
End

Public Sub dibuja()
  
  Dim a As Integer
  
  If Super.getTamano() = 0 Then
    Paint.LineWidth = 4
  Else
    Paint.LineWidth = Super.getTamano()
  Endif
  
  If Super.getColor() = 0 Then
    
    'dibujando linea puntos...
    dibujaLineaPunteada()
    Paint.MoveTo(ArrayCoord[0].x, ArrayCoord[0].y)
    For a = 1 To ArrayCoord.Max - 1
      
      If Ruptura[a + 1] = False Then 
        Paint.LineTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
      Else
        Paint.MoveTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
      Endif
      
    Next
    
  Else
    If hsemitransparente Then
      Paint.Brush = Paint.Color(&H85000000 + Me.getColor())
    Else
      Paint.Brush = Paint.Color(Me.getColor())
    Endif
    
    Paint.LineCap = Paint.LineCapRound
    Paint.Dash = Null
    Paint.DashOffset = 0
    
    'dibujar linea en movimiento:
    Paint.MoveTo(ArrayCoord[0].x, ArrayCoord[0].y)
    For a = 1 To ArrayCoord.Max - 1
      If Me.activarMovimiento = True Then
        
        'Print tiempos[a + 1], Now, InicioDibujando, DateDiff(InicioDibujando, Now, gb.Millisecond)
        If tiempos[a + 1] < DateDiff(InicioDibujando, Now, gb.Millisecond) Then 
          dibujaLineaPunteada()
          Paint.Brush = Paint.Color(Color.pink) 'de color rosa
          If Ruptura[a + 1] = False Then 
            Paint.LineTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
          Else
            Paint.MoveTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
          Endif
          
        Else
          Break
          
        Endif
        
      Else
        If Ruptura[a + 1] = False Then 
          Paint.LineTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
        Else
          Paint.MoveTo(ArrayCoord[a + 1].x, ArrayCoord[a + 1].y)
        Endif
      Endif
      
    Next
    
    '  redibujar de nuevo si llega al final del array
    
    If a > ArrayCoord.max - 1 Then 
      InicioDibujando = Now
    Endif
    
  Endif
  
  If hrelleno Then
    Paint.ClosePath
    Paint.Fill(True)
  Endif
  Paint.stroke
  
  If Super.ptoControl = True Then
    Paint.DrawImage(Me.iconoMover, ArrayCoord[ArrayCoord.Max].x, ArrayCoord[ArrayCoord.Max].y)
    dx = ArrayCoord[ArrayCoord.Max].x + 16
    dy = ArrayCoord[ArrayCoord.Max].y + 16
    Paint.stroke
  Endif
  
End

Public Sub Add(x As Integer, y As Integer)
  
  Dim puntoTmp As New Point
  
  Dim dist As Integer
  
  If x < 10 And y < 10 Then Return 'corregir error de pizarra
  
  dist = Sqr((x - ArrayCoord[ArrayCoord.max].x) ^ 2 + (y - ArrayCoord[ArrayCoord.max].y) ^ 2)
  If dist > paso Then
    puntoTmp.x = x
    puntoTmp.y = y
    ArrayCoord.Add(puntoTmp)
    Ruptura.Add(False)
    tiempos.Add(DateDiff(TiempoInicial, Now, gb.Millisecond))
  Endif
  
End

Public Sub AddRuptura(x As Integer, y As Integer)
  
  Dim puntoTmp As New Point
  Dim tiempoDiferencial As Float
  
  Dim dist As Integer
  
  If x < 10 And y < 10 Then Return 'corregir error de pizarra
  
  dist = Sqr((x - ArrayCoord[ArrayCoord.max].x) ^ 2 + (y - ArrayCoord[ArrayCoord.max].y) ^ 2)
  If dist > paso Then
    puntoTmp.x = x
    puntoTmp.y = y
    ArrayCoord.Add(puntoTmp)
    tiempoDiferencial = DateDiff(TiempoInicial, Now, gb.Millisecond)
    Ruptura.Add(True)
    tiempos.Add(tiempoDiferencial)
    
  Endif
  
End

Public Sub desplaza(x As Integer, y As Integer)
  
  Dim a As Integer
  'Dim w, h As Integer
  
  For a = 0 To ArrayCoord.Max
    
    ArrayCoord[a].x += x - dx
    ArrayCoord[a].y += y - dy
  Next
  
End

Public Sub getx() As Integer
  
  Return dx ' mouseinicioX
  
End

Public Sub gety() As Integer
  
  Return dy 'mouseinicioY
  
End

'---------------------------------------------
' mostrar propiedades
' ---------------------------------------------
Public Sub mostrarpropiedades()
  
  Dim pro As New FormCuadroPropiedades
  
  pro.mostrar(Me, ["Grosor_Linea", "Color_Linea|colorbutton", "Relleno", "SemiTrans"])
  
End

'----------------------------------
'propiedades editables
'----------------------------------
Property Color_Linea As Integer 'color de la linea
Property Grosor_Linea As Integer 'grosor de la linea
Property Relleno As Boolean
Property SemiTrans As Boolean

Private Function Color_Linea_Read() As Integer
  
  Return Super.getColor()
  
End

Private Sub Color_Linea_Write(Value As Integer)
  
  Super.SetColor(value)
  
End

Private Function Grosor_Linea_Read() As Integer
  
  Return Super.getTamano()
  
End

Private Sub Grosor_Linea_Write(Value As Integer)
  
  Super.Settamano(value)
  
End

Private Function Relleno_Read() As Boolean
  
  Return hrelleno
  
End

Private Sub Relleno_Write(Value As Boolean)
  
  hrelleno = value
  
End

Private Function SemiTrans_Read() As Boolean
  
  Return hsemitransparente
  
End

Private Sub SemiTrans_Write(Value As Boolean)
  
  hsemitransparente = value
  
End

Public Sub guardar() As String
  
  Dim a As Integer
  Dim contenido As String
  
  contenido = "dibujo|ManoAlzadaMov|" 'añado palabra clave ManoAlzadaMov
  contenido &= Str$(Super.getTamano()) & "|"
  contenido &= Str$(Me.getColor()) & "|"
  contenido &= Str$(hsemitransparente) & "|"
  contenido &= Str$(hrelleno) & "|"
  
  For a = 0 To ArrayCoord.Max
    contenido &= Str$(ArrayCoord[a].x) & "|"
    contenido &= Str$(ArrayCoord[a].y) & "|"
    contenido &= Str$(tiempos[a]) & "|" 'añadido para guardar los tiempos
    contenido &= Str$(Ruptura[a]) & "|" 'añadido para guardar si es o no punto de ruptura
  Next
  Return contenido
  
End

Public Function abrir(Arraylinea As String[]) As Boolean
  
  Dim a As Integer
  Dim pto As Point
  
  If Arraylinea[1] = "ManoAlzadaMov" Then
    Super.Settamano(Val(Arraylinea[2]))
    Super.SetColor(Val(Arraylinea[3]))
    hrelleno = Val(Arraylinea[4])
    hsemitransparente = Val(Arraylinea[5])
    ArrayCoord.Clear()
    tiempos.Clear()
    For a = 6 To Arraylinea.max - 1 Step 4 'leo de 4 en 4 (x,y, y tiempo,ruptura)
      pto = New Point(Arraylinea[a], Arraylinea[a + 1])
      ArrayCoord.Add(pto)
      tiempos.Add(Arraylinea[a + 2])
      Ruptura.Add(convertirBinario(Arraylinea[a + 3]))
    Next
    
    Return True
  Else
    Return False
    
  Endif
  
End 

Private Function activarMovimiento_Read() As Boolean
  
  Return hactivarMovimiento
  
End

Private Sub activarMovimiento_Write(Value As Boolean)
  
  hactivarMovimiento = value
  DibujandoActivo = True
  InicioDibujando = Now
  
End

Private Sub convertirBinario(cadena As String) As Boolean
  
  If cadena = "True" Then Return True
  Return False
  
End
